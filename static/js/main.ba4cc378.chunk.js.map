{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","button","this","props","item","editItem","handleChange","handleSubmit","length","type","className","disabled","onSubmit","placeholder","value","onChange","Component","TodoItem","title","handleEditItem","handleDeleteItem","onClick","TodoList","items","clearList","map","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filtredItems","filter","selectedItem","find","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba4cc378.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass TodoInput extends Component {\n    render() {\n        const {item, editItem, handleChange, handleSubmit} = this.props;\n        let button;\n\n        if (item.length > 0) {\n            button = <button\n                        type=\"submit\"\n                        className={\n                            editItem\n                            ? \"btn btn-block btn-success mt-3 text-capitalize\"\n                            : \"btn btn-block btn-primary mt-3 text-capitalize\"\n                        }\n                    >\n                        {editItem ? \"edit item\" : \"add item\"}\n                    </button>;\n        } else {\n            button = <button\n                        type=\"submit\"\n                        className={\n                            editItem\n                            ? \"btn btn-block btn-success mt-3 text-capitalize btn-disabled\"\n                            : \"btn btn-block btn-primary mt-3 text-capitalize btn-disabled\"\n                        }\n                        disabled\n                    >\n                        {editItem ? \"edit item\" : \"add item\"}\n                    </button>;\n        }\n\n        return (\n            <div className=\"card card-body my-3\">\n                <form onSubmit={handleSubmit}>\n                    <div className=\"input-group\">\n                        <div className=\"input-group-prepend\">\n                            <div className=\"input-group-text bg-primary text-white\">\n                                <i className=\"fas fa-book\" />\n                            </div>\n                        </div>\n                        <input\n                            type=\"text\"\n                            className=\"form-control text-capitalize\"\n                            placeholder=\"add a todo item\"\n                            value={item}\n                            onChange={handleChange}\n                        />\n                        {button}\n                    </div>\n                </form>\n            </div>\n        );\n    };\n}\n\nexport default TodoInput;","import React, {Component} from 'react';\n\nclass TodoItem extends Component {\n    render() {\n        const {title, editItem, handleEditItem, handleDeleteItem} = this.props;\n        return (\n            <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\" >\n                <h6>{title}</h6>\n                <div className=\"todo-icon\">\n                    {\n                        editItem\n                        ? \"\"\n                        : <span\n                            className=\"mx-2 text-success\"\n                            onClick={handleEditItem}\n                          >\n                            <i className=\"fas fa-pen\" />\n                          </span>\n                    }\n                    {\n                        editItem\n                        ? <span\n                            className=\"mx-2 text-danger\"\n                          >\n                            <i className=\"fas fa-ban\" />\n                          </span>\n                        : <span\n                            className=\"mx-2 text-danger\"\n                            onClick={handleDeleteItem}\n                          >\n                            <i className=\"fas fa-trash\" />\n                          </span>\n                    }\n                </div>\n            </li>\n        );\n    }\n}\n\nexport default TodoItem;","import React, {Component} from 'react';\nimport TodoItem from \"./TodoItem\";\n\nclass TodoList extends Component {\n    render() {\n        const {items, editItem, handleEditItem, handleDeleteItem, clearList} = this.props;\n\n        return (\n            <ul className=\"list-group my-5\">\n                <h3 className=\"text-capitalize text-center\">todo list</h3>\n                {items.map(item => {\n                    return <TodoItem\n                        key={item.id}\n                        editItem={this.props.editItem}\n                        title={item.title}\n                        handleEditItem={() => handleEditItem(item.id)}\n                        handleDeleteItem={() => handleDeleteItem(item.id)}\n                    />\n                })}\n                {\n                    editItem || items.length === 0\n                        ? <button\n                            className=\"btn btn-block btn-danger text-capitalize mt-5 btn-disabled\"\n                            disabled\n                          >\n                            clear list\n                          </button>\n                        : <button\n                            className=\"btn btn-block btn-danger text-capitalize mt-5\"\n                            onClick={clearList}\n                          >\n                            clear list\n                          </button>\n                }\n            </ul>\n        );\n    }\n}\n\nexport default TodoList;","import React, {Component} from 'react';\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport uuid from \"uuid\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {\n        items: [],\n        item: \"\",\n        id: uuid(),\n        editItem: false\n    };\n\n    handleChange = e => {\n        this.setState({\n            item: e.target.value\n        });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n\n        const newItem = {\n            id: this.state.id,\n            title: this.state.item\n        };\n\n        const updatedItems = [...this.state.items, newItem];\n\n        this.setState({\n            items: updatedItems,\n            item: \"\",\n            id: uuid(),\n            editItem: false\n        });\n    };\n\n    handleEditItem = id => {\n        const filtredItems = this.state.items.filter(item => item.id !== id);\n        const selectedItem = this.state.items.find(item => item.id === id);\n        console.log(selectedItem);\n        this.setState({\n            items: filtredItems,\n            item: selectedItem.title,\n            id: id,\n            editItem: true\n        });\n    };\n\n    handleDeleteItem = id => {\n        const filtredItems = this.state.items.filter(item => item.id !== id);\n        this.setState({\n            items: filtredItems\n        });\n    };\n\n    clearList = () => {\n        this.setState({\n            items: []\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-10 mx-auto col-md-8 mt-4\">\n                  <h3 className=\"text-capitalize text-center\">todo input</h3>\n                  <TodoInput\n                    item={this.state.item}\n                    editItem={this.state.editItem}\n                    handleChange={this.handleChange}\n                    handleSubmit={this.handleSubmit}\n                  />\n                  <TodoList\n                      items={this.state.items}\n                      editItem={this.state.editItem}\n                      handleDeleteItem={this.handleDeleteItem}\n                      handleEditItem={this.handleEditItem}\n                      clearList={this.clearList}\n                  />\n                </div>\n              </div>\n            </div>\n        )\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}